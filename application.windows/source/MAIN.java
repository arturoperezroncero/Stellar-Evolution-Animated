/* autogenerated by Processing revision 1276 on 2021-11-11 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class MAIN extends PApplet {

float wid;
int amount=10;
float s,w,a,r,page,c,ending,alpha,alph,tam,shed,shed2;
boolean once,end;
PShape C1,C2,C;
PFont SQ,sq;


//frag
int base=80;
int onion=2;
int vel=100;

float t=1;
float[] x = new float[amount];
float[] y = new float[amount];

float px[]=new float[amount];
float py[]=new float[amount];
float sx[]=new float[amount];
float sy[]=new float[amount];


//proto
int rain=5;
int size_rain=10;
float size_core=0;
float col_core=.1f;
float vel_end=.1f;

//pre_baja, baja e inter
float c1,c2,c3;
float s1,s2,s3,s4;
float th,sp,max,r1,r2,rep;
float endo=30;
float sped=25;
int rad=1;

//animations
Star star1;
int am=10;
int mx;
float[] sizes = new float[am];
float[] diff = new float[am];
int[] mod = new int[am];
int[] curve = new int[am];
int[] colors = new int[am];
float[] speeds = new float[am];
String[] texts = new String[am];
float[] Ra = new float[am];
float[] Rb = new float[am];
boolean[] fadeIN = new boolean[am];
boolean[] fadeOUT = new boolean[am];
int index;

 public void setup(){
  /* size commented out by preprocessor */;
  //size(100,100);
  background(0,0); 
  SQ = createFont("SpaceQuest.ttf", height/40);
  sq = createFont("SpaceQuest.ttf", height/60);
  textFont(SQ);
  textFont(sq);
  textAlign(CENTER);
  frameRate(60);
  wid=height/5;
  star1 = new Star();
  
  C = createShape(GROUP);
  C1 = createShape(ELLIPSE, height/35, 0, height/100, height/100);
  C1.setFill(false);
  C1.setStroke(color(255));
  C2 = createShape(ELLIPSE, height/35, 0, height/500, height/500);
  C2.setFill(color(255));
  C2.setStroke(false);
  
  C.addChild(C1);
  C.addChild(C2);
  
  
  
  //frag
  for(int i=0; i<x.length; i++){
    x[i]=random(-width/3, width/3);
    y[i]=random(-height/3, height/3);
  }
  
  for(int i=0; i<amount; i+=1){
    px[i]=wid/5*random(-1,1);
    py[i]=wid/5*random(-1,1);
    sx[i]=wid/3*random(.3f,1.5f);
    sy[i]=wid/3*random(.3f,1.5f);
  }
}

 public void draw(){
  translate(width/2, height/2);
  
  if(page==0){
    if(once==false){
      once=true;
        index();
    }
    if(mousePressed==true){
      press();
    }
  }
  
  if(page==1){
    frag();
  }
  
  if(page==2){
    proto();
  }
  
  if(page==3){
    background(0);
    pre_muybaja();
  }
  
  if(page==4){
    background(0);
    pre_baja();
  }
  
  if(page==5){
    background(0);
    inter();
  }
  
  if(page==6){
    he_wd();
    //prueba(conveccion/radiacion, fade in, fade out, initial radius1, final radius1, initial radius2, final radius2, speed, index, max index)
  }
  
  if(page==7){
    rgb1();
  }
  
  if(page==8){
    rgb2();
  }
  
  if(page==9){
    agb1();
  }
  
  if(page==10){
    agb2();
  }
  
  if(page==11){
    agb3();
  }
  
  if(page==12){
    sm1();
  }
  
  if(page==13){
    sm2();
  }
  
  
  
  
  
  
  if(page==100){
    brown();
  }
  if(page==101){
    sup_blue();
  }
  
  if(end==true){
    page=0;
    once=false;
    end=false; 
  }
  
  
  
  
  //if(millis()>10000){
  //  saveFrame();
  //}
  
  //text("M",600,500);
  //shape(c, 600, 500);
}


 public void mouseReleased(){
  /*
  1-frag
  2-proto
  
  3-pre-muybaja
  4-pre-baja
  5-pre-inter
  
  6-red dwarf to He-WD
  7-0.4-1M to RGB
  8-1-12M to RGB
  9-AGB He-flash
  10-AGB no He-flash, no C fusion
  11-C fusion
  */
  
  
  
  float rx=mouseX-width/2;
  float ry=mouseY-height/2;
  if(page==0){
    t=1;
    ending=0;
    once=false;
    shed=1;
  }
  
  if(rx>-3*width/7-width/20 && rx<-3*width/7+width/20 && ry>height/6-width/20 && ry<height/6+width/20 && page==0){
    page=1;
  }
  if(rx>-3*width/7-width/20 && rx<-3*width/7+width/20 && ry>-height/6-width/20 && ry<-height/6+width/20 && page==0){
    background(60,20,20);
    page=2;
  }
  if(rx>-2*width/7-width/20 && rx<-2*width/7+width/20 && ry>-height/6-width/20 && ry<-height/6+width/20 && page==0){
    page=3;
  }
  if(rx>-2*width/7-width/20 && rx<-2*width/7+width/20 && ry>-width/20 && ry<width/20 && page==0){
    page=4;
  }
  if(rx>-2*width/7-width/20 && rx<-2*width/7+width/20 && ry>height/6-width/20 && ry<height/6+width/20 && page==0){
    page=5;
  }
  if(rx>-width/20 && rx<width/20 && ry>-2*height/6-width/20 && ry<-2*height/6+width/20 && page==0){
    index=0;
    page=6;
  }
  if(rx>-width/7-width/20 && rx<-width/7+width/20 && ry>-height/6-width/20 && ry<-height/6+width/20 && page==0){
    index=0;
    page=7;
  }
  if(rx>-width/7-width/20 && rx<-width/7+width/20 && ry>-width/20 && ry<width/20 && page==0){
    index=0;
    page=8;
  }
  if(rx>-width/20 && rx<width/20 && ry>-height/6-width/20 && ry<-height/6+width/20 && page==0){
    index=0;
    page=9;
  }
  if(rx>width/7-width/20 && rx<width/7+width/20 && ry>-width/20 && ry<width/20 && page==0){
    index=0;
    page=10;
  }
  if(rx>width/7-width/20 && rx<width/7+width/20 && ry>height/6-width/20 && ry<height/6+width/20 && page==0){
    index=0;
    page=11;
  }
  if(rx>-width/20 && rx<width/20 && ry>height/6-width/20 && ry<height/6+width/20 && page==0){
    index=0;
    page=12;
  }
  if(rx>-width/20 && rx<width/20 && ry>2.2f*height/6-width/20 && ry<2.2f*height/6+width/20 && page==0){
    index=0;
    alph=100;
    page=13;
    shed2=1;
  }
  
  
  
  
  if(rx>-2*width/7-width/20 && rx<-2*width/7+width/20 && ry>-2*height/6-width/20 && ry<-2*height/6+width/20 && page==0){
    page=100;
  }
  if(rx>-2*width/7-width/20 && rx<-2*width/7+width/20 && ry>2*height/6-width/20 && ry<2*height/6+width/20 && page==0){
    page=101;
  }
}
class Star {
  float size;
  float t,ta;
  float speed;
  float alpha;
  float alphaT=1;
  boolean check;
  float indece;
  int c;

  Star() {
    
  }
  
   public void sized(float first, float last, int c1, int c2, float speed, int ind, int marx, float dif, int cur){
    if(cur==0){
      first=lerp(first,last,speed);
      c1=lerpColor(c1,c2,speed);
      
      noStroke();
      fill(c1,150);
      for(float i=0; i<height/20; i+=height/80){
        ellipse(0,0,first+i,first+i);
      }
    
      sizes[ind]=first;
      colors[ind]=c1;
      tam=first;
    }
    
    if(cur==1){
      size=lerp(first,last,speed*t);
      c=lerpColor(c1,c2,speed*t);
      
      size=constrain(size,0,height);
      
      noStroke();
      fill(c,150);
      for(float i=0; i<height/20; i+=height/80){
        ellipse(0,0,size+i,size+i);
      }
      tam=size;
      t+=1;
    }
    
    
    
    //noStroke();
    //fill(c1);
    //ellipse(0,0,first,first);
    //for(float i=0; i<first/10; i+=first/40){
    //  strokeWeight(i);
    //  noFill();
    //  stroke(c1,150);
    //  ellipse(0,0,first,first);
    //}
    
    
    
    fill(255,alphaT);
    textFont(SQ);
    text(texts[ind],0,2*height/5);
    
    if(cur==0){
      if(first/last>0.96f+dif && first/last<1.04f-dif){
        alphaT*=0.9f;
      }else{
        alphaT*=1.1f;
      }if(alphaT<1){
        alphaT=1;
      }
      
      if(first/last>0.99f+dif/20 && first/last<1.01f-dif/20){
        if(ind>=marx-1){
          ending();
        }else{
          index++;
        }
      }
    }
    
    if(cur==1){
      if(speed*t>0.9f){
        alphaT*=0.9f;
      }else{
        alphaT*=1.1f;
      }if(alphaT<1){
        alphaT=1;
      }
      
      if(speed*t>0.99f){
        if(ind>=marx-1){
          ending();
        }else{
          index++;
          t=0;
        }
      }
    }
    
  }
  
   public void transport(int mode, boolean in, boolean out, float a1, float A1, float a2, float A2, float speed, int ind, float dif){
    ta+=1;
    a1=lerp(a1,A1,speed*t*0.033f);
    a2=lerp(a2,A2,speed*t*0.033f);
    
    
    if(in==true && check==false){
      if(alpha>250){
        check=true;
      }
      alpha=lerp(alpha,255,speed*2);
    }if(out==true && speed*t*2>0.95f){
      alpha=lerp(alpha,0,speed*2);
      
    }
    
    if(indece!=ind){
      check=false;
    }
    indece=ind;
    
    if(mode==0){
      float rep=7;
      float max=100;
      float x;
    
      stroke(255,alpha);
      strokeWeight(10);
      
      for(int i=0; i<max; i++){
        x=i*2*PI/max;
        point(a1*sin(x)+a2*sin(rep*x+ta/20), a1*cos(x)+a2*cos(rep*x+ta/20));
      }
    }if(mode==1){
      
      float th=3;
      int rad=2;
        
      for(float i=a1; i<a2; i+=th){
        noFill();
        strokeWeight(th);
        stroke(255,(1-(i/a2))*200*abs(sin(rad*2*PI*i/a2-ta/10))*alpha/255);
        ellipse(0,0,i,i);
      }
    }
    
    Ra[ind]=a1;
    Rb[ind]=a2;
  }
}



//mx=2;
      
//star1 = new Star();
//sizes[0]=300;
//sizes[1]=500;
//sizes[2]=100;

//colors[0]=color(255,0,0);
//colors[1]=color(0,255,0);
//colors[2]=color(0,0,255);

//Ra[0]=sizes[0]*.0;
//Ra[1]=sizes[1]*.0;
//Ra[2]=sizes[2]*.0;

//Rb[0]=sizes[0]*.5;
//Rb[1]=sizes[1]*.5;
//Rb[2]=sizes[2]*.5;

//fadeIN[0]=true;
//fadeIN[1]=true;
//fadeIN[2]=true;

//fadeOUT[0]=true;
//fadeOUT[1]=true;
//fadeOUT[2]=true;

//texts[0]="lol";
//texts[1]="lolo";

//speeds[0]=0.01;
//speeds[1]=0.03;
//}
//star1.sized(sizes[index],sizes[index+1],colors[index],colors[index+1],speeds[index],index,mx);
//star1.transport(1,true,true,Ra[index],Ra[index+1],Rb[index],Rb[index+1],speeds[index],index);
////prueba(conveccion/radiacion, fade in, fade out, initial radius1, final radius1, initial radius2, final radius2, speed, index, max index)
 public void frag(){
  background(100,60,60);

  if(t*vel<width*3){
  noFill();
  stroke(120,60,60,255);
  strokeWeight(50);
  ellipse(-250,-250,t*vel+250,t*vel+250);
  
  stroke(130,60,60,255);
  strokeWeight(30);
  ellipse(-250,-250,t*vel+250,t*vel+250);
  
  stroke(140,60,60,255);
  strokeWeight(10);
  ellipse(-250,-250,t*vel+250,t*vel+250);
  }else{
    for(int i=0; i<x.length; i++){
    noStroke();
    for(int o=0; o<onion; o++){
      fill(100+t*.1f,60+t*.03f,60+t*.03f,map(i,0,x.length,0,255)-o*20);
      ellipse(x[i],y[i],o*25+i*10000/t,o*25+i*10000/t);
    }
    }
  }
  
  fade("The gas cloud contracts, decreasing its Jeans mass, and prompting the contraction of smaller clouds inside it.",0,800);
  
  t+=1;
  
  if(t>800){
  ending();
}
}




 public void proto(){
  if(t<35){
    //isothermal collapse
    
    noStroke();
    fill(60+t*10,20,20,100);
    ellipse(0,0,10*height/t,10*height/t);
  
    fill(255,20+col_core,20+col_core,100);
    size_core=log(t)*100;
    ellipse(0,0,size_core,size_core);
    
    s=size_core;
    c=20+col_core;
    
    rectan("Isothermal collapse",0,35);
  
  }if(t>35 && t<120){
    //opaque core, non-homologous collapse around homogenous core
    
    fill(255,c,c,100);
    size_core*=(t)/(t+.15f);
    c+=size_core*.001f;
    ellipse(0,0,size_core,size_core);
    
    rectan("Non-homologous collapse around homogenous core",35,120);
  }if(t>120 && t<125){
    //central core in hydrostatic equilibrium surrounded by a still-falling envelope, supersonic rain causes first shock front
    
    fill(255,c,c,100);
    size_core*=(t)/(t+.15f);
    c+=size_core*.002f;
    
    //stroke(255,180,180,random(0,10));
    //strokeWeight(random(0,15));
    stroke(255,10);
    ellipse(0,0,size_core,size_core);
    
    rectan("First shock front",120,125);
  }if(t>125 && t<135){
    //stable core
    rectan("Stable core",125,135);
  }if(t>135 && t<180){
    //disassociation begins, second collapse
    
    fill(255,c,c,100);
    size_core*=(t)/(t+.3f);
    c+=size_core*.001f;
    
    noStroke();
    ellipse(0,0,size_core,size_core);
    
    rectan("Disassociation begins, second collapse",135,180);
  }if(t>180){
    //inner core of atomic hydrogen, collapse stops, PROTOSTAR
    
    fill(255,4);
    ellipse(0,0,size_core,size_core);
    
    
    if(t>190){
        fill(255,255-(1.9f*t-200));
        ellipse(0,0,size_core+3*(t-220),size_core+3*(t-220));
      }
    
    if(t>210){
      //if(2*width-vel_end*(t-210)>150 && t<220){
      //  noStroke();
      //  fill(0,3);
      //  ellipse(0,0,2*width-vel_end*(t-210),2*width-vel_end*(t-210));
      //}
    }
    
    rectan("Collapse stops, protostar is formed",180,220);
  }
  
  t+=.2f;
  
  
  if(t>220){
  ending();
}
}











 public void pre_muybaja(){
  if(t>0){
    //contraction
    //cambiar +-i para definicion de borde
    for(int i=0; i<=endo; i+=5){
      s1=(height/3-i+30)/((t+10)/(t+15));
      noStroke();
      fill(9*i,i,i);
      ellipse(0,0,s1,s1);
    }
    
    if(t>25){
      //convective max=numero puntos
      // r1 radio, r2 radio bucles, rep numero de bucles
      strokeWeight(15);
      stroke(240,20,20,(t-25));
      max=100;
      r1=s1/4;
      r2=height/25;
      rep=7;
      
      for(int i=0; i<max; i++){
        float j;
        j=i*2*PI/max;
        point(r1*sin(j)+r2*sin(rep*j+t/20), r1*cos(j)+r2*cos(rep*j+t/20));
      }
      
      //beginShape();
      //for(int i=0; i<=max; i++){
      //  x=i*2*PI/max;
      //  vertex(r1*sin(x)+r2*sin(rep*x+t/20), r1*cos(x)+r2*cos(rep*x+t/20));
      //}
      //endShape();
      
      
      
      
      
      //radiative
      
      //s2=s1-50;
      //th=15;
        //for(float i=0; i<s2; i+=th){
        //noFill();
        //stroke(255,(1-(i/s2))*50*abs(sin(2*PI*i/s2-t/10)));
        //println(i);
        //strokeWeight(th);
        //ellipse(0,0,i,i);
           
      
      
      //spin
      
      //float c2=100/(t+100);
      //stroke(9*end/c2,end/c2,end/c2);
      //strokeWeight(10);
      //noFill();
      //ellipse(0,0,height/8,height/8);
      
      //pushMatrix();
      //rotate(t/100);
      
      //fill(9*end,end,end);
      //noStroke();
      //rectMode(CENTER);
      //rect(0,0,height/4,height/40);
      //rect(0,0,height/40,height/4);
      
      
      
      
      
      
      
      //espiral
      //strokeWeight(10);
      //stroke(255,50);
      //int max=150;
      //beginShape();
      //for(int i=0; i<max; i++){
      //  vertex(i*sin(i*10*PI/max-t/10),i*cos(i*10*PI/max-t/10));
      //}
      //endShape();
    }
  }
  
if(t<100){
  fade("Contraction",0,100);
}else{
  fade("Convective core",100,400);
}
  
t+=.5f;

if(t>400){
  ending();
}
}










 public void pre_baja(){
  c1=constrain(8*endo,0,255);
  c2=constrain(5*map(t,0,400,0,1)*endo,0,170);
  c3=constrain(map(t,0,400,0,1)*endo,0,100);
  
  if(t>0){
    //contraction
    noStroke();
    for(int i=0; i<=endo; i+=15){
      s1=(2*height/5-i+30)/((t+10)/(t+15));
      fill(c1*i/endo,c2*i/endo,c3*i/endo);
      ellipse(0,0,s1,s1);
    }
    
    if(t>75){
      //first instances of cno, convective core, hayashi line
      strokeWeight(15);
      stroke(c1+20,c2+20,c3+20,constrain((t-75),0,150));
      max=100;
      if(t<200){
        r1=s1/4;
        r2=height/25;
      }else{
        r1*=.0045f*exp(-.0005f*(pow(t-200,2)))+1;
        r2/=.002f*exp(-.0005f*(pow(t-200,2)))+1;
      }
      rep=7;
      
      for(int i=0; i<max; i++){
        float j;
        j=i*2*PI/max;
        point(r1*sin(j)+r2*sin(rep*j+t/20), r1*cos(j)+r2*cos(rep*j+t/20));
      }
    }
      
      
      if(t>250){
        //first instances pp, radiative core, henyey track
        s2=s1-100;
        th=15;
        
        for(float i=0; i<s2; i+=th){
          noFill();
          stroke(c1+20,c2+20,c3+20,(1-(i/s2))*150*abs(sin(2*PI*i/s2-t/10))*constrain(map(t,250,300,0,1),0,1));
          strokeWeight(th);
          ellipse(0,0,i,i);
        }
  }
  t+=.5f;
}

if(t<125){
  fade("Contraction",0,125);
}if(t>125 && t<250){
  fade("Convective core",125,250);
}if(t>250){
  fade("Radiative core",250,500);
}

if(t>500){
    ending();
  }
}







 public void inter(){
  c1=constrain(7*endo*map(t,0,400,.9f,1),0,200);
  c2=constrain(6*endo*map(t,0,400,.6f,1),0,200);
  c3=constrain(5*endo*map(t,0,400,.5f,1),0,255);
  
  
  if(t>0){
    //contraction
    noStroke();
    for(int i=0; i<=endo; i+=15){
      s1=(height/2-i+30)/((t+10)/(t+15));
      fill(c1*i/endo,c2*i/endo,c3*i/endo);
      ellipse(0,0,s1,s1);
    }
    
    if(t>100){
      //first instances of cno, convective core, hayashi line
      
      stroke(c1+20,c2+20,c3+20,constrain((t-75),0,150));
      max=100;
      if(t<200){
        strokeWeight(15);
        r1=s1/4;
        r2=height/25;
      }if(t>200 && t<400){
        r1*=.0045f*exp(-.0005f*(pow(t-200,2)))+1;
        r2/=.002f*exp(-.0005f*(pow(t-200,2)))+1;
      }if(t>400 && t<425){
        stroke(c1+20,c2+20,c3+20,map(t,400,425,150,0));
      }if(t>425){
        strokeWeight(10);
        stroke(c1+20,c2+20,c3+20,map(t,425,450,0,150));
        r1=s1/8;
        r2=height/35;
      }
      rep=7;
      
      for(int i=0; i<max; i++){
        float j;
        j=i*2*PI/max;
        point(r1*sin(j)+r2*sin(rep*j+t/20), r1*cos(j)+r2*cos(rep*j+t/20));
      }
    }
      
      
      if(t>250){
        //first instances pp, radiative core, henyey track
        if(t<400){
          s2=s1/2;
          s4=0;
        }else{
          s2=s1-constrain(map(t,400,425,s1/2,0),0,s1/2);
          s4=constrain(map(t,400,425,0,s1/2),0,s1/2);
          rad=2;
        }
        
        th=15;
        
        for(float i=s4; i<s2; i+=th){
          noFill();
          stroke(c1+20,c2+20,c3+20,(1-(i/s2))*200*abs(sin(rad*2*PI*i/s2-t/10))*constrain(map(t,250,300,0,1),0,1));
          strokeWeight(th);
          ellipse(0,0,i,i);
        }
  }
  
  t+=.5f;
}

if(t<125){
  fade("Contraction",0,125);
}if(t>125 && t<250){
  fade("Convective core",125,250);
}if(t>250){
  fade("Radiative core",250,500);
}

//println(t);
if(t>600){
    ending();
  }
}


 public void brown(){
  background(0);
  
  noStroke();
  fill(200,100,50,50);
  for(float i=0; i<20; i++){
    ellipse(0,0,height/3+i*height/200,height/3+i*height/200);
  }
  
  textFont(SQ);
  fill(255);
  text("Stars with masses below 0.08 solar masses will never fuse H into He, never reaching the MS.",0,2*height/5);
  
  if(t>200){
    ending();
  }
  
  t+=1;
}


 public void sup_blue(){
  background(0);
  
  noStroke();
  fill(100,100,255,50);
  for(float i=0; i<20; i++){
    ellipse(0,0,height/2+i*height/150,height/2+i*height/150);
  }
  
  textFont(SQ);
  fill(255);
  text("Stars with masses over 12 solar masses skip the pre-MS, and are born already in the MS.",0,2*height/5);
  
  if(t>200){
    ending();
  }
  
  t+=1;
}
 public void he_wd(){
  background(0);
    if(once==false){
      once=true;
      
      mx=4;
      
      star1 = new Star();
      sizes[0]=height/3;
      sizes[1]=height/4;
      sizes[2]=height/5;
      sizes[3]=height/6;
      sizes[4]=height/7;
      
      colors[0]=color(255,50,50);
      colors[1]=color(255,75,75);
      colors[2]=color(50,50,255);
      colors[3]=color(255,255,255);
      colors[4]=color(0,0,0);
      
      Ra[0]=sizes[0]*.0f;
      Ra[1]=sizes[1]*.0f;
      Ra[2]=sizes[2]*.0f;
      
      Rb[0]=sizes[0]*.0f;
      Rb[1]=sizes[1]*.0f;
      Rb[2]=sizes[2]*.0f;
      
      fadeIN[0]=false;
      fadeIN[1]=false;
      fadeIN[2]=false;
      
      fadeOUT[0]=false;
      fadeOUT[1]=false;
      fadeOUT[2]=false;
      
      texts[0]="H turns into He, red dwarf";
      texts[1]="Blue dwarf";
      texts[2]="CO-White dwarf";
      texts[3]="Black dwarf?";
      
      speeds[0]=0.02f;
      speeds[1]=0.02f;
      speeds[2]=0.02f;
      speeds[3]=0.02f;
    }
    star1.sized(sizes[index],sizes[index+1],colors[index],colors[index+1],speeds[index],index,mx,1,1);
    star1.transport(1,true,true,Ra[index],Ra[index+1],Rb[index],Rb[index+1],speeds[index],index,diff[index]);
}

 public void rgb1(){
  background(0);
    if(once==false){
      once=true;
      
      mx=4;
      
      star1 = new Star();
      sizes[0]=height/4.1f;
      sizes[1]=height/4;
      sizes[2]=height/2;
      sizes[3]=height/1.5f;
      sizes[4]=height/1.2f;
      
      diff[0]=0.03f;
      diff[1]=0;
      diff[2]=0.035f;
      diff[3]=0.03f;
      diff[4]=0.03f;
      
      colors[0]=color(255,200,100);
      colors[1]=color(255,200,100);
      colors[2]=color(255,50,50);
      colors[3]=color(255,40,40);
      colors[4]=color(255,30,30);
      
      Ra[0]=sizes[0]*.0f;
      Ra[1]=sizes[1]*.00f;
      Ra[2]=sizes[2]*.3f;
      Ra[3]=sizes[3]*.3f;
      Ra[4]=sizes[4]*.3f;
      
      Rb[0]=sizes[0]*.8f;
      Rb[1]=sizes[1]*.00f;
      Rb[2]=sizes[2]*.1f;
      Rb[3]=sizes[3]*.1f;
      Rb[4]=sizes[4]*.1f;
      
      mod[0]=1;
      mod[1]=2;
      mod[2]=0;
      mod[3]=0;
      
      curve[0]=0;
      curve[1]=1;
      curve[2]=1;
      curve[3]=1;
      
      fadeIN[0]=true;
      fadeIN[1]=true;
      fadeIN[2]=true;
      fadeIN[3]=true;
      
      fadeOUT[0]=true;
      fadeOUT[1]=true;
      fadeOUT[2]=true;
      fadeOUT[3]=true;
      
      texts[0]="The core depletes its H";
      texts[1]="H shell-burning begins. Slow expansion.";
      texts[2]="Degenerate core forms. Convective outer layers.";
      texts[3]="Red Giant Branch";
      
      speeds[0]=0.006f;
      speeds[1]=0.005f;
      speeds[2]=0.005f;
      speeds[3]=0.005f;
    }
    star1.sized(sizes[index],sizes[index+1],colors[index],colors[index+1],speeds[index],index,mx,diff[index],curve[index]);
    star1.transport(mod[index],true,true,Ra[index],Ra[index+1],Rb[index],Rb[index+1],speeds[index],index,diff[index]);
}


 public void rgb2(){
  background(0);
    if(once==false){
      once=true;
      
      mx=4;
      
      star1 = new Star();
      sizes[0]=height/3;
      sizes[1]=height/4;
      sizes[2]=height/2;
      sizes[3]=height/1.5f;
      sizes[4]=height/1.2f;
      
      diff[0]=0;
      diff[1]=0;
      diff[2]=0;
      diff[3]=0;
      diff[4]=0;
      
      colors[0]=color(200,200,255);
      colors[1]=color(255,255,255);
      colors[2]=color(255,200,50);
      colors[3]=color(255,100,40);
      colors[4]=color(255,50,30);
      
      Ra[0]=sizes[0]*.0f;
      Ra[1]=sizes[1]*.00f;
      Ra[2]=sizes[2]*.3f;
      Ra[3]=sizes[3]*.3f;
      Ra[4]=sizes[4]*.3f;
      
      Rb[0]=sizes[0]*.8f;
      Rb[1]=sizes[1]*.00f;
      Rb[2]=sizes[2]*.1f;
      Rb[3]=sizes[3]*.1f;
      Rb[4]=sizes[4]*.1f;
      
      mod[0]=1;
      mod[1]=2;
      mod[2]=0;
      mod[3]=0;
      
      fadeIN[0]=true;
      fadeIN[1]=true;
      fadeIN[2]=true;
      fadeIN[3]=true;
      
      fadeOUT[0]=true;
      fadeOUT[1]=true;
      fadeOUT[2]=true;
      fadeOUT[3]=true;
      
      texts[0]="The core depletes its H. Contraction begins (hook).";
      texts[1]="H shell-burning begins. Quick expansion (Hertzsprung Gap).";
      texts[2]="Convective outer layers.";
      texts[3]="Red Giant Branch";
      
      speeds[0]=0.01f;
      speeds[1]=0.01f;
      speeds[2]=0.01f;
      speeds[3]=0.01f;
      
      curve[0]=1;
      curve[1]=1;
      curve[2]=1;
      curve[3]=1;
    }
    star1.sized(sizes[index],sizes[index+1],colors[index],colors[index+1],speeds[index],index,mx,diff[index],1);
    star1.transport(mod[index],true,true,Ra[index],Ra[index+1],Rb[index],Rb[index+1],speeds[index],index,diff[index]);
}


 public void agb1(){
  background(0);
    if(once==false){
      once=true;
      
      mx=9;
      
      star1 = new Star();
      sizes[0]=height/2.5f;
      sizes[1]=height/2.2f;
      sizes[2]=height/1.9f;
      sizes[3]=height/1.6f;
      sizes[4]=height/1.3f;
      sizes[5]=height/2.25f;
      sizes[6]=height/2;
      sizes[7]=height/1.8f;
      sizes[8]=height/2.5f;
      sizes[9]=height/6;
      
      curve[0]=1;
      curve[1]=0;
      curve[2]=1;
      curve[3]=1;
      curve[4]=1;
      curve[5]=0;
      curve[6]=0;
      
      diff[0]=0;
      diff[1]=0;
      diff[2]=0;
      diff[3]=0;
      diff[4]=0;
      diff[5]=0;
      diff[6]=0;
      
      colors[0]=color(255,200,100);
      colors[1]=color(255,150,80);
      colors[2]=color(255,100,50);
      colors[3]=color(255,255,255);
      colors[4]=color(255,50,50);
      colors[5]=color(255,200,150);
      colors[6]=color(255,150,100);
      colors[7]=color(255,50,50);
      colors[8]=color(255,200,50);
      colors[9]=color(255,255,255);
      
      Ra[0]=sizes[0]*.0f;
      Ra[1]=sizes[1]*.0f;
      Ra[2]=sizes[2]*.0f;
      Ra[3]=sizes[3]*.0f;
      Ra[4]=sizes[4]*.1f;
      Ra[5]=sizes[5]*.3f;
      Ra[6]=sizes[6]*.33f;
      Ra[7]=sizes[7]*.36f;
      Ra[8]=sizes[8]*.0f;
      
      Rb[0]=sizes[0]*.1f;
      Rb[1]=sizes[1]*.2f;
      Rb[2]=sizes[2]*.4f;
      Rb[3]=sizes[3]*.0f;
      Rb[4]=sizes[4]*.05f;
      Rb[5]=sizes[5]*.1f;
      Rb[6]=sizes[6]*.1f;
      Rb[7]=sizes[7]*.1f;
      Rb[8]=sizes[8]*.0f;
      
      mod[0]=1;
      mod[1]=1;
      mod[2]=2;
      mod[3]=0;
      mod[4]=0;
      mod[5]=0;
      mod[6]=0;
      mod[7]=0;
      mod[8]=2;
      
      fadeIN[0]=true;
      fadeIN[1]=true;
      fadeIN[2]=true;
      fadeIN[3]=true;
      
      fadeOUT[0]=true;
      fadeOUT[1]=true;
      fadeOUT[2]=true;
      fadeOUT[3]=true;
      
      
      texts[0]="RGB, shell burning feeds a growing He core.";
      texts[1]="Chemical discontinuity is reached (Thomas peak).";
      texts[2]="HELIUM FLASH";
      texts[3]="Helium flash. The increase in energy production prompts an expansion which removes degeneracy. Steady He burning starts in the core.";
      texts[4]="The star travels through the Horizontal Branch. Growing convective core rich in C and O develops, fed by H shell bunring.";
      texts[5]="An inert CO core begins to form below the He burning shells. H burning stops due to the expansion. E-AGB.";
      texts[6]="H burning reignited. Unstable He shell burning. TP-AGB.";
      texts[7]="Fuel finally runs out, contraction begins.";
      texts[8]="The star sheds its outer layers, leaving a CO-WD behind.";
      
      speeds[0]=0.003f;
      speeds[1]=0.003f;
      speeds[2]=0.05f;
      speeds[3]=0.003f;
      speeds[4]=0.003f;
      speeds[5]=0.003f;
      speeds[6]=0.003f;
      speeds[7]=0.003f;
      speeds[8]=0.03f;
      speeds[9]=0.03f;
    }
    if(index>7){
      shed();
    }
    star1.sized(sizes[index],sizes[index+1],colors[index],colors[index+1],speeds[index],index,mx,diff[index],1);
    star1.transport(mod[index],true,true,Ra[index],Ra[index+1],Rb[index],Rb[index+1],speeds[index],index,diff[index]);
}



 public void agb2(){
  background(0);
    if(once==false){
      once=true;
      
      mx=6;
      
      star1 = new Star();
      sizes[0]=height/2;
      sizes[1]=height/1.8f;
      sizes[2]=height/3;
      sizes[3]=height/2.25f;
      sizes[4]=height/1.5f;
      sizes[5]=height/2.5f;
      sizes[6]=height/6;
      
      curve[0]=1;
      curve[1]=0;
      curve[2]=1;
      curve[3]=1;
      curve[4]=1;
      curve[5]=0;
      curve[6]=0;
      
      diff[0]=0;
      diff[1]=0;
      diff[2]=0;
      diff[3]=0;
      diff[4]=0;
      diff[5]=0;
      diff[6]=0;
      
      colors[0]=color(255,70,70);
      colors[1]=color(255,50,50);
      colors[2]=color(200,200,255);
      colors[3]=color(255,100,100);
      colors[4]=color(255,50,50);
      colors[5]=color(255,200,80);
      colors[6]=color(255,255,255);
      
      Ra[0]=sizes[0]*.0f;
      Ra[1]=sizes[1]*.0f;
      Ra[2]=sizes[2]*.1f;
      Ra[3]=sizes[3]*.3f;
      Ra[4]=sizes[4]*.35f;
      Ra[5]=sizes[5]*.0f;
      Ra[6]=sizes[6]*.0f;
      
      Rb[0]=sizes[0]*.1f;
      Rb[1]=sizes[1]*.4f;
      Rb[2]=sizes[2]*.05f;
      Rb[3]=sizes[3]*.1f;
      Rb[4]=sizes[4]*.1f;
      Rb[5]=sizes[5]*.0f;
      Rb[6]=sizes[6]*.0f;
      
      mod[0]=1;
      mod[1]=0;
      mod[2]=0;
      mod[3]=0;
      mod[4]=0;
      mod[5]=2;
      mod[6]=2;
      
      fadeIN[0]=true;
      fadeIN[1]=true;
      fadeIN[2]=true;
      fadeIN[3]=true;
      
      fadeOUT[0]=true;
      fadeOUT[1]=true;
      fadeOUT[2]=true;
      fadeOUT[3]=true;
      
      texts[0]="RGB, shell burning feeds a growing He core.";
      texts[1]="Increasing core mass prompts He burning, creating a convective core. Blue loop.";
      texts[2]="An inert CO core begins to form below the He burning shells. H burning stops due to the expansion. E-AGB.";
      texts[3]="H burning reignited. Unstable He shell burning. TP-AGB.";
      texts[4]="Fuel finally runs out, contraction begins.";
      texts[5]="The star sheds its outer layers (post-AGB), leaving a CO-WD behind.";
      
      speeds[0]=0.003f;
      speeds[1]=0.003f;
      speeds[2]=0.003f;
      speeds[3]=0.003f;
      speeds[4]=0.003f;
      speeds[5]=0.03f;
    }
    if(index>4){
      shed();
    }
    star1.sized(sizes[index],sizes[index+1],colors[index],colors[index+1],speeds[index],index,mx,diff[index],1);
    star1.transport(mod[index],true,true,Ra[index],Ra[index+1],Rb[index],Rb[index+1],speeds[index],index,diff[index]);
}


 public void agb3(){
  background(0);
    if(once==false){
      once=true;
      
      mx=8;
      
      star1 = new Star();
      sizes[0]=height/2;
      sizes[1]=height/1.8f;
      sizes[2]=height/3;
      sizes[3]=height/2.25f;
      sizes[4]=height/1.5f;
      sizes[5]=height/1.3f;
      sizes[6]=height/1.2f;
      sizes[7]=height/1.1f;
      sizes[8]=height/6;
      
      curve[0]=1;
      curve[1]=0;
      curve[2]=1;
      curve[3]=1;
      curve[4]=1;
      curve[5]=0;
      curve[6]=0;
      
      diff[0]=0;
      diff[1]=0;
      diff[2]=0;
      diff[3]=0;
      diff[4]=0;
      diff[5]=0;
      diff[6]=0;
      
      colors[0]=color(255,70,70);
      colors[1]=color(255,50,50);
      colors[2]=color(200,200,255);
      colors[3]=color(255,100,100);
      colors[4]=color(255,80,70);
      colors[5]=color(255,255,255);
      colors[6]=color(255,50,50);
      colors[7]=color(255,40,40);
      colors[8]=color(255,255,255);
      
      Ra[0]=sizes[0]*.0f;
      Ra[1]=sizes[1]*.0f;
      Ra[2]=sizes[2]*.1f;
      Ra[3]=sizes[3]*.3f;
      Ra[4]=sizes[4]*.35f;
      Ra[5]=sizes[5]*.35f;
      Ra[6]=sizes[6]*.35f;
      Ra[7]=sizes[7]*.0f;
      Ra[8]=sizes[8]*.0f;
      
      Rb[0]=sizes[0]*.1f;
      Rb[1]=sizes[1]*.4f;
      Rb[2]=sizes[2]*.05f;
      Rb[3]=sizes[3]*.1f;
      Rb[4]=sizes[4]*.1f;
      Rb[5]=sizes[5]*.1f;
      Rb[6]=sizes[6]*.1f;
      Rb[7]=sizes[7]*.0f;
      Rb[8]=sizes[8]*.0f;
      
      mod[0]=1;
      mod[1]=0;
      mod[2]=0;
      mod[3]=0;
      mod[4]=0;
      mod[5]=0;
      mod[6]=0;
      mod[7]=2;
      mod[8]=2;
      
      fadeIN[0]=true;
      fadeIN[1]=true;
      fadeIN[2]=true;
      fadeIN[3]=true;
      
      fadeOUT[0]=true;
      fadeOUT[1]=true;
      fadeOUT[2]=true;
      fadeOUT[3]=true;
      
      texts[0]="RGB, shell burning feeds a growing He core.";
      texts[1]="Increasing core mass prompts He burning, creating a convective core. Blue loop.";
      texts[2]="An inert CO core begins to form below the He burning shells. H burning stops due to the expansion. E-AGB.";
      texts[3]="H burning reignited. Unstable He shell burning. TP-AGB.";
      //The growing partially degenerate core reaches the C burning temperature. 
      texts[4]="C FLASH";
      texts[5]="After the C-flash and flames, if Mc>1.37, the star will evolve as a massive one, and collapse into a NS.";
      texts[6]="If Mc<1.37, Ne fusion will be avoided, and eventually leave behind a ONeMg-WD.";
      texts[7]="";
      
      speeds[0]=0.003f;
      speeds[1]=0.003f;
      speeds[2]=0.003f;
      speeds[3]=0.003f;
      speeds[4]=0.03f;
      speeds[5]=0.003f;
      speeds[6]=0.003f;
      speeds[7]=0.03f;
    }
    if(index>6){
      shed();
    }
    star1.sized(sizes[index],sizes[index+1],colors[index],colors[index+1],speeds[index],index,mx,diff[index],1);
    star1.transport(mod[index],true,true,Ra[index],Ra[index+1],Rb[index],Rb[index+1],speeds[index],index,diff[index]);
}





 public void sm1(){
  background(0);
    if(once==false){
      once=true;
      
      mx=6;
      
      star1 = new Star();
      sizes[0]=height/2;
      sizes[1]=height/1.8f;
      sizes[2]=height/1.6f;
      sizes[3]=height/1.4f;
      sizes[4]=height/2;
      sizes[5]=height/1.3f;
      sizes[6]=height/6;
      
      curve[0]=1;
      curve[1]=0;
      curve[2]=1;
      curve[3]=1;
      curve[4]=1;
      curve[5]=0;
      curve[6]=0;
      
      diff[0]=0;
      diff[1]=0;
      diff[2]=0;
      diff[3]=0;
      diff[4]=0;
      diff[5]=0;
      diff[6]=0;
      
      colors[0]=color(80,80,255);
      colors[1]=color(80,80,255);
      colors[2]=color(255,255,50);
      colors[3]=color(255,50,50);
      colors[4]=color(255,150,100);
      colors[5]=color(255,40,40);
      colors[6]=color(255,255,255);
      
      Ra[0]=sizes[0]*.1f;
      Ra[1]=sizes[1]*.1f;
      Ra[2]=sizes[2]*.25f;
      Ra[3]=sizes[3]*.3f;
      Ra[4]=sizes[4]*.1f;
      Ra[5]=sizes[5]*.1f;
      Ra[6]=sizes[6]*.0f;
      
      Rb[0]=sizes[0]*.05f;
      Rb[1]=sizes[1]*.05f;
      Rb[2]=sizes[2]*.05f;
      Rb[3]=sizes[3]*.05f;
      Rb[4]=sizes[4]*.03f;
      Rb[5]=sizes[5]*.05f;
      Rb[6]=sizes[6]*.0f;
      
      mod[0]=0;
      mod[1]=0;
      mod[2]=0;
      mod[3]=0;
      mod[4]=0;
      mod[5]=0;
      mod[6]=2;

      
      fadeIN[0]=true;
      fadeIN[1]=true;
      fadeIN[2]=true;
      fadeIN[3]=true;
      
      fadeOUT[0]=true;
      fadeOUT[1]=true;
      fadeOUT[2]=true;
      fadeOUT[3]=true;
      
      texts[0]="Blue supergiant, convective core";
      texts[1]="H shell begins around inert He core. Yellow supergiant.";
      texts[2]="Red supergiant.";
      texts[3]="He fusion begins. Blue loop (depends on the star).";
      texts[4]="C, Ne and Si burning, onion model. Fe core collapse.";
      texts[5]="SUPERNOVA.";
      
      speeds[0]=0.003f;
      speeds[1]=0.003f;
      speeds[2]=0.003f;
      speeds[3]=0.003f;
      speeds[4]=0.003f;
      speeds[5]=0.03f;
    }
    if(index>6){
      shed();
    }
    star1.sized(sizes[index],sizes[index+1],colors[index],colors[index+1],speeds[index],index,mx,diff[index],1);
    star1.transport(mod[index],true,true,Ra[index],Ra[index+1],Rb[index],Rb[index+1],speeds[index],index,diff[index]);
}





 public void sm2(){
  background(0);
    if(once==false){
      once=true;
      
      mx=6;
      
      star1 = new Star();
      sizes[0]=height/1.5f;
      sizes[1]=height/1.5f;
      sizes[2]=height/3;
      sizes[3]=height/3;
      sizes[4]=height/3;
      sizes[5]=height/3;
      sizes[6]=height/6;
      
      curve[0]=1;
      curve[1]=0;
      curve[2]=1;
      curve[3]=1;
      curve[4]=1;
      curve[5]=0;
      curve[6]=0;
      
      diff[0]=0;
      diff[1]=0;
      diff[2]=0;
      diff[3]=0;
      diff[4]=0;
      diff[5]=0;
      diff[6]=0;
      
      colors[0]=color(120,120,255);
      colors[1]=color(120,120,255);
      colors[2]=color(80,80,255);
      colors[3]=color(120,120,200);
      colors[4]=color(120,120,255);
      colors[5]=color(120,120,255);
      colors[6]=color(255,255,255);
      
      Ra[0]=sizes[0]*.1f;
      Ra[1]=sizes[1]*.1f;
      Ra[2]=sizes[2]*.25f;
      Ra[3]=sizes[3]*.3f;
      Ra[4]=sizes[4]*.1f;
      Ra[5]=sizes[5]*.1f;
      Ra[6]=sizes[6]*.0f;
      
      Rb[0]=sizes[0]*.05f;
      Rb[1]=sizes[1]*.05f;
      Rb[2]=sizes[2]*.05f;
      Rb[3]=sizes[3]*.05f;
      Rb[4]=sizes[4]*.03f;
      Rb[5]=sizes[5]*.05f;
      Rb[6]=sizes[6]*.0f;
      
      mod[0]=0;
      mod[1]=0;
      mod[2]=0;
      mod[3]=0;
      mod[4]=0;
      mod[5]=0;
      mod[6]=2;

      
      fadeIN[0]=true;
      fadeIN[1]=true;
      fadeIN[2]=true;
      fadeIN[3]=true;
      
      fadeOUT[0]=true;
      fadeOUT[1]=true;
      fadeOUT[2]=true;
      fadeOUT[3]=true;
      
      texts[0]="Blue supergiant, convective core.";
      texts[1]="Extreme mass loss. Wolf Rayet star with hydrogen lines.";
      texts[2]="Luminous Blue Variable (depends on star).";
      texts[3]="He fusion. Wolf Rayet star without hydrogen lines.";
      texts[4]="Core collapse. Supernova.";
      texts[5]="SUPERNOVA.";
      
      speeds[0]=0.003f;
      speeds[1]=0.003f;
      speeds[2]=0.003f;
      speeds[3]=0.003f;
      speeds[4]=0.01f;
      speeds[5]=0.03f;
    }
    if(index>0 && alph>10){
      shed2(colors[1]);
    }
    if(index>6){
      shed();
    }
    star1.sized(sizes[index],sizes[index+1],colors[index],colors[index+1],speeds[index],index,mx,diff[index],1);
    star1.transport(mod[index],true,true,Ra[index],Ra[index+1],Rb[index],Rb[index+1],speeds[index],index,diff[index]);
}
 public void icon(String text, int t, float p1, float p2){
  
  /* 
  0-frag
  1-proto
  2-very red
  3-red
  4-yellow
  5-white
  6-blue
  7-very blue
  8-very very blue
  
  12-wd
  13-ns
  14-bh
  */
  
  pushMatrix();
  translate(p1, p2);
  
  //FRAGMENTATION
  if(t==0){
  amount=5;
  noStroke();
  fill(255,100,100,5);
  for(float i=1; i<wid/10; i+=wid/200){
    ellipse(0,0,wid-i,wid-i);
  }
  fill(255,100,100,5);
  
  //float px[]=new float[amount];
  //float py[]=new float[amount];
  //float sx[]=new float[amount];
  //float sy[]=new float[amount];
  
  //for(int i=0; i<amount; i+=1){
  //  px[i]=wid/5*random(-1,1);
  //  py[i]=wid/5*random(-1,1);
  //  sx[i]=wid/3*random(.3,1.5);
  //  sy[i]=wid/3*random(.3,1.5);
  //}
  
  for(int i=0; i<amount; i+=1){
    for(int o=0; o<10; o+=1){
      ellipse(px[i],py[i],sx[i]-o,sx[i]-o);
    }
  }
  fill(255);
  textFont(SQ);
  text(text,0,height/8);
  }
  
  
  
  //PROTOSTAR
  if(t==1){
  amount=70;
  s=wid;
  w=100;
  a=10;
  noStroke();
  for(int i=0; i<amount; i+=1){
    fill(255,w,w,a);
    ellipse(0,0,s,s);
    s*=0.98f;
    if(i>amount/3){
      w+=1.3f;
      a*=1.07f;
    }
  }
  fill(255);
  textFont(SQ);
  text(text,0,height/8);
  }
  
  

  
  //VERYRED
  if(t==2){
  r=wid/6;
  noStroke();
  for(int o=0; o<10; o+=1){
    fill(200,40,40,70);
    ellipse(0,0,r,r);
    r*=0.9f;
  }
  fill(255);
  textFont(sq);
  text(text,0,height/30);
  //shape(c, height/35, height/30);
  }
  
  
  
  
  //RED
  if(t==3){
  r=1.3f*wid/6;
  noStroke();
  for(int o=0; o<20; o+=1){
    fill(255,100,50,100);
    ellipse(0,0,r,r);
    r*=0.9f;
  }
  fill(255);
  textFont(sq);
  text(text,0,height/25);
  //shape(c, height/35, height/30);
  }
  
  
  
  //YELLOW
  if(t==4){
  r=2*wid/6;
  noStroke();
  for(int o=0; o<20; o+=1){
    fill(255,200,50,100);
    ellipse(0,0,r,r);
    r*=0.96f;
  }
  fill(255);
  textFont(sq);
  text(text,0,height/20);
  //shape(c, height/35, height/30);
  }
  
  
  
  
  
  //WHITE
  if(t==5){
  r=2.5f*wid/6;
  noStroke();
  for(int o=0; o<25; o+=1){
    fill(255,255,255,100);
    ellipse(0,0,r,r);
    r*=0.97f;
  }
  fill(255);
  textFont(sq);
  text(text,0,height/17);
  //shape(c, height/35, height/30);
  }
  
  
  
  
  
  //BLUE
  if(t==6){
  r=3*wid/6;
  noStroke();
  for(int o=0; o<30; o+=1){
    fill(200,200,255,100);
    ellipse(0,0,r,r);
    r*=0.97f;
  }
  fill(255);
  textFont(sq);
  text(text,0,height/170);
  //shape(c, height/35, height/30);
  }

  
  
  
  //VERYBLUE
  if(t==7){
  r=0.75f*wid;
  noStroke();
  for(int o=0; o<35; o+=1){
    fill(120,120,255,100);
    ellipse(0,0,r,r);
    r*=0.98f;
  }
  fill(255);
  textFont(sq);
  text(text,0,height/100);
  //shape(c, height/35, height/30);
  }
  
  

  
  
  //VERYVERYBLUE
  if(t==8){
  r=wid;
  noStroke();
  for(int o=0; o<40; o+=1){
    fill(90,90,255,100);
    ellipse(0,0,r,r);
    r*=0.99f;
  }
  fill(255);
  textFont(sq);
  text(text,0,height/100);
  //shape(c, height/35, height/30);
  }
  

  
  
  //WD
  if(t==12){
  r=width/14;
  a=1;
  noStroke();
  for(int o=0; o<50; o+=1){
    fill(255,255,255,a);
    ellipse(0,0,r,r);
    r*=0.95f;
    a*=1.1f;
  }
  fill(255);
  textFont(sq);
  text(text,0,height/30);
  //shape(c, height/35, height/30);
  }
  
  
  
  //NS
  if(t==13){
  pushMatrix();
  rotate(PI/6);
  r=width/8;
  a=1;
  noStroke();
  for(float o=0; o<height/21.6f; o+=1){
    fill(255,255,255,a);
    triangle(0,0,-height/21.6f+o,wid/2+o,height/21.6f-o,wid/2+o);
    triangle(0,0,-height/21.6f+o,-wid/2-o,height/21.6f-o,-wid/2-o);
    
    r*=0.95f;
    a*=1.1f;
  }
  
  r=width*.19f;
  a=255;
  for(int o=0; o<75; o+=1){
    strokeWeight(15);
    stroke(0,a);
    noFill();
    ellipse(0,0,r/5,r);
    
    r*=0.99f;
    a*=0.8f;
  }
  
  
  r=width*.15f;
  a=1;
  noStroke();
  for(int o=0; o<100; o+=1){
    fill(255,255,255,a);
    ellipse(0,0,r,r);
    
    r*=0.95f;
    a*=1.1f;
  }
  popMatrix();
  fill(255);
  textFont(sq);
  text(text,0,height/20);
  //shape(c, height/35, height/30);
  }
  
  
  //NS small
  if(t==15){
  pushMatrix();
  rotate(-PI/6);
  r=width/10;
  a=1;
  noStroke();
  for(float o=0; o<height/21.6f; o+=1){
    fill(255,255,255,a);
    triangle(0,0,-height/21.6f+o,wid/4+o,height/21.6f-o,wid/4+o);
    triangle(0,0,-height/21.6f+o,-wid/4-o,height/21.6f-o,-wid/4-o);
    
    r*=0.95f;
    a*=1.1f;
  }
  
  r=width*.15f;
  a=255;
  for(int o=0; o<50; o+=1){
    strokeWeight(15);
    stroke(0,a);
    noFill();
    ellipse(0,0,r/7,r);
    
    r*=0.99f;
    a*=0.8f;
  }
  
  
  r=width*.05f;
  a=1;
  noStroke();
  for(int o=0; o<100; o+=1){
    fill(255,255,255,a);
    ellipse(0,0,r,r);
    
    r*=0.95f;
    a*=1.1f;
  }
  popMatrix();
  fill(255);
  textFont(sq);
  text(text,0,height/20);
  //shape(c, height/35, height/30);
  }
  
  
  
  
  
  //BH
  if(t==14){
  amount=70;
  s=width/12;
  w=70;
  a=15;
  noStroke();
  for(int i=0; i<amount; i+=1){
    fill(4*w,2*w,.5f*w,a);
    ellipse(0,0,s,s);
    s*=0.965f;
    if(i>3*amount/4){
      w*=0.8f;
      a*=1.2f;
    }
  }
  fill(255);
  textFont(sq);
  text(text,0,height/30);
  //shape(c, height/35, height/30);
  }
  popMatrix();
}
 public void index(){
  background(0);
  
  icon("Fragmentation",0,-3*width/7,height/6);
  lines(-3*width/7,height/15,-3*width/7,0);
    icon("Protostar",1,-3*width/7,-height/6);
  shape2(-2.6f*width/7,-height/6,-2.35f*width/7,-height/6,
  -2.35f*width/7,-height/6,-2.35f*width/7,-height/6);
  shape2(-2.1f*width/7,-2.5f*height/6,-2.35f*width/7,-2.5f*height/6,
  -2.35f*width/7,2.65f*height/6,-2.1f*width/7,2.65f*height/6);
  fill(255);
  textFont(SQ);
  pushMatrix();
  translate(-2.4f*width/7,0);
  rotate(-PI/2);
  text("Pre-MS",0,0);
  popMatrix();
  
  icon("<0.08 M",2,-2*width/7,-2*height/6);
  icon("0.08-0.6 M",3,-2*width/7,-height/6);
  icon("0.6-2 M",4,-2*width/7,0);
  icon("2-8 M",6,-2*width/7,height/6);
  icon(">8 M",7,-2*width/7,2*height/6);
  shape1(-1.9f*width/7,-1.5f*height/6,-1.65f*width/7,-1.5f*height/6,
  -1.65f*width/7,-0.25f*height/7,-1.40f*width/7,-0.25f*height/7,
  -1.40f*width/7,-2.5f*height/6,-width/7,-2.5f*height/6);
  
  fill(255);
  textFont(SQ);
  pushMatrix();
  translate(-1.53f*width/7,0.045f*height/6);
  text("MS",0,0);
  popMatrix();
  
  shape1(-1.9f*width/7,2.65f*height/6,-1.65f*width/7,2.65f*height/6,
  -1.65f*width/7,0.25f*height/7,-1.40f*width/7,0.25f*height/7,
  -1.40f*width/7,2.25f*height/6,-width/7,2.25f*height/6);

  
  //shape1(-1.9*width/7,2.65*height/6,-1.65*width/7,2.65*height/6,
  //-1.65*width/7,0.25*height/7,-1.40*width/7,0.25*height/7,
  //-1.40*width/7,2.65*height/6,-width/7,2.65*height/6);
  
  
  
  

  
  icon("<0.4 M",3,-width/7,-2*height/6);
  lines(-0.8f*width/7,-2*height/6,-0.2f*width/7,-2*height/6);
  //icon("0.4-1 M",4,-width/7,-height/6);
  //icon("1-8 M",5,-width/7,0);
  //icon("8-12 M",6,-width/7,height/6);
  icon("0.4-2 M",4,-width/7,-height/6);
  icon("2-12 M",6,-width/7,0);
  icon(">12 M",7,-width/7,1.5f*height/6);
  lines(-0.65f*width/7,1.25f*height/6,-0.4f*width/7,1.05f*height/6);
  lines(-.7f*width/7,1.8f*height/6,-0.5f*width/7,2*height/6);
  
  shape1(-width/7,-1.4f*height/6,-0.75f*width/7,-1.4f*height/6,
  -0.75f*width/7,-0.80f*height/7,-0.30f*width/7,-0.80f*height/7,
  -0.30f*width/7,-1.4f*height/6,0,-1.4f*height/6);
  
  fill(255);
  textFont(SQ);
  pushMatrix();
  translate(-0.55f*width/7,-0.50f*height/7);
  text("RGB",0,0);
  popMatrix();
  
  shape1(-width/7,0.45f*height/6,-0.75f*width/7,0.45f*height/6,
  -0.75f*width/7,-0.30f*height/7,-0.30f*width/7,-0.30f*height/7,
  -0.30f*width/7,0.45f*height/6,0,0.45f*height/6);
  
  
  //icon("<0.4 M",3,-width/7,-2*height/6);
  //lines(-0.8*width/7,-2*height/6,-0.2*width/7,-2*height/6);
  //icon("0.4-1 M",4,-width/7,-height/6);
  //icon("1-8 M",5,-width/7,0);
  //icon("8-12 M",6,-width/7,height/6);
  //icon(">12 M",7,-width/7,2*height/6);
  //lines(-0.7*width/7,1.7*height/6,-0.35*width/7,1.35*height/6);
  //lines(-.65*width/7,2.1*height/6,-0.5*width/7,2.15*height/6);
  
  //shape1(-width/7,-1.4*height/6,-0.75*width/7,-1.4*height/6,
  //-0.75*width/7,-0.65*height/7,-0.30*width/7,-0.65*height/7,
  //-0.30*width/7,-1.4*height/6,0,-1.4*height/6);
  
  //fill(255);
  //textFont(SQ);
  //pushMatrix();
  //translate(-0.55*width/7,-0.35*height/7);
  //text("RGB",0,0);
  //popMatrix();
  
  //shape1(-width/7,1.4*height/6,-0.75*width/7,1.4*height/6,
  //-0.75*width/7,-0.15*height/7,-0.30*width/7,-0.15*height/7,
  //-0.30*width/7,0.4*height/6,0,0.4*height/6);
  
  
  icon("He-WD",12,0,-2*height/6);
  icon("<2.3 M",4,0,-height/6);
  lines(0.3f*width/7,-height/6,.7f*width/7,-height/6);
  icon(">2.3 M",6,0,0);
  lines(0.3f*width/7,0,.7f*width/7,0);
  lines(0.25f*width/7,.25f*height/6,.75f*width/7,.75f*height/6);
  icon("<45 M",7,0,height/6);
  lines(0.35f*width/7,1.25f*height/6,.7f*width/7,1.75f*height/6);
  icon(">45 M",8,0,2.2f*height/6);
  lines(0.45f*width/7,2.2f*height/6,.6f*width/7,2.2f*height/6);
  
  icon("CO-WD",12,width/7,-height/6);
  icon("<8 M",5,width/7,0);
  lines(width/7,-.35f*height/6,width/7,-.6f*height/6);
  icon("8-12 M",6,width/7,height/6);
  lines(1.2f*width/7,.8f*height/6,1.7f*width/7,1.1f*height/12);
  lines(1.2f*width/7,1.2f*height/6,1.6f*width/7,2.8f*height/12);
  icon("BH",14,width/7,2.2f*height/6);
  textFont(SQ);
  text("OR",1.4f*width/7,2.25f*height/6);
  text("AGB",0.5f*width/7,-0.5f*height/6);
  text("Super-AGB",2*width/7,0*height/6);
  icon("NS",15,1.7f*width/7,2.2f*height/6);
  
  icon("8-11 M",6,2*width/7,height/12);
  lines(2.3f*width/7,height/12,2.7f*width/7,height/12);
  icon("11-12 M",7,2*width/7,3*height/12);
  lines(2.4f*width/7,3*height/12,2.7f*width/7,3*height/12);
  
  icon("ONeMg-WD",12,3*width/7,height/12);
  icon("NS",13,3*width/7,3*height/12);
}

 public void press(){
  noFill();
  stroke(255,1);
  strokeWeight(7);
  ellipse(-3*width/7,height/6,height/5,height/5);
  ellipse(-3*width/7,-height/6,height/5,height/5);
  
  ellipse(-2*width/7,-height/6,height/5,height/5);
  ellipse(-2*width/7,0,height/5,height/5);
  ellipse(-2*width/7,height/6,height/5,height/5);
  
  ellipse(-width/7,-height/6,height/5,height/5);
  ellipse(-width/7,0,height/5,height/5);
  
  ellipse(0,-2*height/6,height/5,height/5);
  ellipse(0,-height/6,height/5,height/5);
  ellipse(0,height/6,height/5,height/5);
  ellipse(0,2.2f*height/6,height/5,height/5);
  
  ellipse(width/7,0,height/5,height/5);
  ellipse(width/7,height/6,height/5,height/5);
}
 public void lines(float x1, float y1, float x2, float y2){
  float gro=10;
  PVector m1 = new PVector(x2-x1,y2-y1);
  m1.setMag(height/200);
  PVector m2 = new PVector(-m1.y,m1.x);
  strokeCap(ROUND);
  for(int i=0; i<gro; i++){
    stroke(255,map(i,5,gro,150,0));
    strokeWeight(map(i,0,gro,0,gro));
    line(x1,y1,x2,y2);
    noFill();
    triangle(x2+2*m1.x, y2+2*m1.y, x2+m2.x, y2+m2.y, x2-m2.x, y2-m2.y);
  }
}

 public void shape1(float x1, float y1, float x2, float y2,
float x3, float y3, float x4, float y4, float x5, float y5, 
float x6, float y6){
  float gro=15;
  noFill();
  strokeCap(ROUND);
  for(int i=0; i<gro; i++){
    stroke(255,map(i,0,gro,150,0));
    strokeWeight(map(i,0,gro,10,gro));
    beginShape();
    vertex(x1, y1);
    vertex(x2, y2);
    vertex(x3, y3);
    vertex(x4, y4);
    vertex(x5, y5);
    vertex(x6, y6);
    endShape();
  }
}

 public void shape2(float x1, float y1, float x2, float y2,
float x3, float y3, float x4, float y4){
  float gro=15;
  noFill();
  strokeCap(ROUND);
  for(int i=0; i<gro; i++){
    stroke(255,map(i,0,gro,150,0));
    strokeWeight(map(i,0,gro,10,gro));
    beginShape();
    vertex(x1, y1);
    vertex(x2, y2);
    vertex(x3, y3);
    vertex(x4, y4);
    endShape();
  }
}



 public void ending(){
  noStroke();
  fill(0,ending*4);
  rect(-width/2,-height/2,width,height);
  ending+=1;
  if(ending>=255/4){
    end=true;
  }
}

 public void rectan(String tex, float t1, float t2){
  pushStyle();
  fill(0);
  stroke(255);
  strokeWeight(4);
  rectMode(CENTER);
  textAlign(CENTER);
  rect(0,2*height/5,width/2,height/14);
  popStyle();
  
  textFont(SQ);
  fill(255);
  fade(tex,t1,t2);
}

 public void fade(String text, float t1, float t2){
  textFont(SQ);
  if(t<t1+(t2-t1)/3){
    fill(255,map(t,t1,t1+(t2-t1)/3,0,255));
  }if(t>=t1+(t2-t1)/3 && t<=t1+2*(t2-t1)/3){
    fill(255);
  }if(t>t1+2*(t2-t1)/3){
    fill(255,map(t,t1+2*(t2-t1)/3,t2,255,0));
  }
  
  text(text,0,2*height/5);
}

 public void shed(){
  fill(255,80,80,20);
  noStroke();
  shed=constrain(shed,0,height*2);
  for(float i =0; i<10; i++){
    ellipse(0,0,shed+i*height/15,shed+i*height/15);
  }
  shed*=1.1f;
}

 public void shed2(int c){
  stroke(c,alph);
  noFill();
  strokeWeight(height/10);
  shed2=constrain(shed2,0,height*2);
  for(float i =0; i<3; i+=0.3f){
    ellipse(0,0,shed2+i*height/10,shed2+i*height/10);
  }
  shed2*=1.08f;
  println(shed2);
  if(shed2>height/3){
    alph*=0.9f;
  }
}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "MAIN" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
